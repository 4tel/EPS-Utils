/***
 * @Summary.ko-KR
 * ● value를 반환합니다.
 * minValue보다 작으면 minValue를 반환합니다.
 * maxValue보다 크다면 maxValue를 반환합니다.
***/
function clamp(value, minValue, maxValue) {
	if (value<=minValue) return minValue;
	if (value>=maxValue) return maxValue;
	return value;
}
/***
 * @Summary.ko-KR
 * [fromMin, fromMax] 범위의 value를 [toMin, toMax]로 투영합니다.
***/
function projection(value, fromMin, fromMax, toMin, toMax) {
	if (fromMax >= fromMin && toMax >= toMin) {
		const tmp = value * (fromMax-fromMin+1) / (toMax-toMin+1);
		return clamp(tmp, toMin, toMax);
	}
	if (fromMax>=fromMin) {
		const tmp = value * (fromMax-fromMin+1) / (toMin-toMax+1);
		return clamp(tmp, toMax, toMin);
	}
	if (toMax>=toMin) {
		const tmp = value * (fromMin-fromMax+1) / (toMax-toMin+1);
		return clamp(tmp, toMin, toMax);
	}
	const tmp = value * (fromMin-fromMax+1) / (toMin-toMax+1);
	return clamp(tmp, toMax, toMin);
}

/***
 * @Summary.ko-KR
 * Alpha가 minVal일때 atMin, maxVal일 때 atMax를 반환합니다.
 * 중간값일 경우 선형 보간하여 반환합니다.
 * 
 * @param.Alpha.ko-KR
 * 보간에 사용될 인자입니다.
 * 
 * @param.minVal.ko-KR
 * Alpha의 최솟값입니다.
 * 
 * @param.maxVal.ko-KR
 * Alpha의 최댓값입니다.
 * 
 * @param.atMin.ko-KR
 * Alpha가 최소일 때 반환값입니다.
 * 
 * @param.atMax.ko-KR
 * Alpha가 최대일때 반환값입니다.
***/
function Lerp(Alpha, minVal, maxVal, atMin, atMax) {
	if (Alpha==minVal) return atMin;
	if (Alpha==maxVal) return atMax;
	const valRange = maxVal-minVal;
	const atRange = atMax - atMin;
	return atMin + (Alpha - minVal) * atRange / valRange;
}
